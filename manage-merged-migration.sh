#!/bin/bash

echo "üîÑ Gestionnaire de Migration Fusionn√©e - RestroSaaS"
echo "=================================================="

cd "$(dirname "$0")"

# Couleurs pour l'affichage
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher avec couleur
print_color() {
    echo -e "${1}${2}${NC}"
}

# V√©rifier si la migration fusionn√©e existe
MERGED_MIGRATION="database/migrations/2024_01_01_000000_create_all_tables.php"

if [[ ! -f "$MERGED_MIGRATION" ]]; then
    print_color $RED "‚ùå Migration fusionn√©e introuvable !"
    echo "Ex√©cutez d'abord: php merge-migrations.php"
    exit 1
fi

print_color $GREEN "‚úÖ Migration fusionn√©e trouv√©e : $MERGED_MIGRATION"

# Menu principal
while true; do
    echo ""
    print_color $BLUE "üîß Options disponibles :"
    echo "1. üìä Analyser l'√©tat actuel des migrations"
    echo "2. üíæ Sauvegarder les migrations existantes"
    echo "3. üß™ Tester la migration fusionn√©e (dry-run)"
    echo "4. üóëÔ∏è  Archiver les anciennes migrations"
    echo "5. üöÄ Appliquer la migration fusionn√©e (ATTENTION!)"
    echo "6. üîÑ Restaurer les migrations sauvegard√©es"
    echo "7. ‚ùå Quitter"
    echo ""
    read -p "Choisissez une option (1-7): " choice

    case $choice in
        1)
            print_color $YELLOW "üìä Analyse de l'√©tat des migrations..."
            echo ""
            echo "Migration fusionn√©e :"
            ls -la "$MERGED_MIGRATION"
            echo ""
            echo "Nombre de migrations existantes :"
            migration_count=$(ls database/migrations/*.php | grep -v "2024_01_01_000000_create_all_tables.php" | wc -l)
            echo "- Migrations originales : $migration_count"
            echo "- Migration fusionn√©e : 1"
            echo ""
            echo "√âtat de la base de donn√©es :"
            php artisan migrate:status | head -10
            echo "..."
            php artisan migrate:status | tail -5
            ;;

        2)
            print_color $YELLOW "üíæ Sauvegarde des migrations..."
            backup_dir="migrations_backup_$(date +%Y%m%d_%H%M%S)"
            mkdir -p "$backup_dir"

            # Copier toutes les migrations sauf la fusionn√©e
            cp database/migrations/*.php "$backup_dir/" 2>/dev/null
            rm "$backup_dir/2024_01_01_000000_create_all_tables.php" 2>/dev/null

            migration_count=$(ls "$backup_dir"/*.php 2>/dev/null | wc -l)
            print_color $GREEN "‚úÖ $migration_count migrations sauvegard√©es dans $backup_dir/"

            # Cr√©er un fichier de restauration
            cat > "${backup_dir}/restore.sh" << 'EOF'
#!/bin/bash
echo "üîÑ Restauration des migrations..."
cp *.php ../database/migrations/
echo "‚úÖ Migrations restaur√©es !"
EOF
            chmod +x "${backup_dir}/restore.sh"
            ;;

        3)
            print_color $YELLOW "üß™ Test de la migration fusionn√©e (simulation)..."
            echo ""
            echo "Contenu de la migration :"
            echo "- $(grep -c 'Schema::create' $MERGED_MIGRATION) tables √† cr√©er"
            echo "- $(grep -c 'Schema::dropIfExists' $MERGED_MIGRATION) tables √† supprimer (m√©thode down)"
            echo ""
            echo "Test de syntaxe PHP :"
            if php -l "$MERGED_MIGRATION" > /dev/null 2>&1; then
                print_color $GREEN "‚úÖ Syntaxe PHP valide"
            else
                print_color $RED "‚ùå Erreur de syntaxe PHP"
                php -l "$MERGED_MIGRATION"
            fi
            ;;

        4)
            print_color $YELLOW "üóëÔ∏è  Archivage des anciennes migrations..."
            read -p "‚ö†Ô∏è  Voulez-vous vraiment archiver toutes les anciennes migrations ? (y/N): " confirm

            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                archive_dir="archived_migrations_$(date +%Y%m%d_%H%M%S)"
                mkdir -p "$archive_dir"

                # D√©placer toutes les migrations sauf la fusionn√©e
                for file in database/migrations/*.php; do
                    if [[ "$(basename "$file")" != "2024_01_01_000000_create_all_tables.php" ]]; then
                        mv "$file" "$archive_dir/"
                    fi
                done

                archived_count=$(ls "$archive_dir"/*.php 2>/dev/null | wc -l)
                print_color $GREEN "‚úÖ $archived_count migrations archiv√©es dans $archive_dir/"

                echo "Migrations restantes :"
                ls -la database/migrations/
            else
                print_color $BLUE "‚ÑπÔ∏è  Archivage annul√©"
            fi
            ;;

        5)
            print_color $RED "‚ö†Ô∏è  ATTENTION : Application de la migration fusionn√©e"
            echo ""
            echo "Cette action va :"
            echo "1. R√©initialiser compl√®tement la base de donn√©es"
            echo "2. Appliquer uniquement la migration fusionn√©e"
            echo "3. Perdre toutes les donn√©es existantes"
            echo ""
            read -p "√ätes-vous ABSOLUMENT s√ªr ? Tapez 'CONFIRMER' pour continuer: " confirm

            if [[ "$confirm" == "CONFIRMER" ]]; then
                print_color $YELLOW "üöÄ Application de la migration fusionn√©e..."

                # Sauvegarder d'abord
                php artisan migrate:status > "migration_status_before_$(date +%Y%m%d_%H%M%S).txt"

                # Reset et migration
                php artisan migrate:fresh --force

                if [[ $? -eq 0 ]]; then
                    print_color $GREEN "‚úÖ Migration fusionn√©e appliqu√©e avec succ√®s !"
                    echo ""
                    echo "Nouvel √©tat :"
                    php artisan migrate:status
                else
                    print_color $RED "‚ùå Erreur lors de l'application de la migration"
                fi
            else
                print_color $BLUE "‚ÑπÔ∏è  Application annul√©e"
            fi
            ;;

        6)
            print_color $YELLOW "üîÑ Restauration des migrations..."
            backup_dirs=($(ls -d migrations_backup_* 2>/dev/null | sort -r))

            if [[ ${#backup_dirs[@]} -eq 0 ]]; then
                print_color $RED "‚ùå Aucune sauvegarde trouv√©e"
            else
                echo "Sauvegardes disponibles :"
                for i in "${!backup_dirs[@]}"; do
                    echo "$((i+1)). ${backup_dirs[i]}"
                done

                read -p "Choisissez une sauvegarde (1-${#backup_dirs[@]}): " backup_choice

                if [[ "$backup_choice" =~ ^[0-9]+$ ]] && [[ "$backup_choice" -ge 1 ]] && [[ "$backup_choice" -le ${#backup_dirs[@]} ]]; then
                    selected_backup="${backup_dirs[$((backup_choice-1))]}"

                    # Supprimer la migration fusionn√©e et restaurer
                    rm "$MERGED_MIGRATION"
                    cp "$selected_backup"/*.php database/migrations/

                    print_color $GREEN "‚úÖ Migrations restaur√©es depuis $selected_backup"
                else
                    print_color $RED "‚ùå Choix invalide"
                fi
            fi
            ;;

        7)
            print_color $BLUE "üëã Au revoir !"
            exit 0
            ;;

        *)
            print_color $RED "‚ùå Option invalide"
            ;;
    esac
done

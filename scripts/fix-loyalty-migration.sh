#!/bin/bash

# üîß SCRIPT DE CORRECTION - CONFLIT MIGRATION LOYALTY_TRANSACTIONS
# R√©sout l'erreur de table d√©j√† existante

echo "üîß CORRECTION CONFLIT MIGRATION - LOYALTY_TRANSACTIONS"
echo "======================================================="

# Configuration
MIGRATION_FILE="2024_01_15_000012_create_loyalty_transactions_table"
TABLE_NAME="loyalty_transactions"

echo "üìã Probl√®me d√©tect√©:"
echo "   - Migration: $MIGRATION_FILE"
echo "   - Table: $TABLE_NAME d√©j√† existante"
echo "   - Erreur: SQLSTATE[42S01] Table already exists"

echo ""
echo "üéØ Solutions disponibles:"
echo "1. Marquer la migration comme ex√©cut√©e (recommand√©)"
echo "2. Supprimer la table existante et refaire la migration"
echo "3. Analyser les diff√©rences de structure"

echo ""
read -p "Choisissez une option (1-3): " choice

case $choice in
    1)
        echo "‚úÖ Option 1: Marquer la migration comme ex√©cut√©e"
        echo "   Insertion dans la table migrations..."

        # Marquer la migration comme ex√©cut√©e sans l'ex√©cuter
        php artisan tinker --execute="
            DB::table('migrations')->insert([
                'migration' => '$MIGRATION_FILE',
                'batch' => DB::table('migrations')->max('batch') + 1
            ]);
            echo 'Migration marqu√©e comme ex√©cut√©e\n';
        "

        if [ $? -eq 0 ]; then
            echo "‚úÖ Migration marqu√©e comme ex√©cut√©e avec succ√®s!"
            echo "üîÑ Tentative de continuer les migrations..."
            php artisan migrate
        else
            echo "‚ùå Erreur lors du marquage de la migration"
        fi
        ;;

    2)
        echo "‚ö†Ô∏è  Option 2: Supprimer et recr√©er la table"
        echo "   ATTENTION: Ceci supprimera toutes les donn√©es de loyalty_transactions!"
        read -p "   √ätes-vous s√ªr? (oui/non): " confirm

        if [ "$confirm" = "oui" ]; then
            echo "üóëÔ∏è  Suppression de la table..."
            php artisan tinker --execute="
                Schema::dropIfExists('$TABLE_NAME');
                echo 'Table supprim√©e\n';
            "

            echo "üîÑ Relance des migrations..."
            php artisan migrate
        else
            echo "‚ùå Op√©ration annul√©e"
        fi
        ;;

    3)
        echo "üîç Option 3: Analyse de la structure"
        echo "   Structure actuelle de la table:"

        php artisan tinker --execute="
            \$columns = DB::select('DESCRIBE $TABLE_NAME');
            foreach(\$columns as \$column) {
                echo \$column->Field . ' | ' . \$column->Type . ' | ' . \$column->Null . ' | ' . \$column->Key . '\n';
            }
        "

        echo ""
        echo "üìã Pour comparaison, voici la structure attendue par la migration:"
        echo "   - id: bigint unsigned auto_increment primary key"
        echo "   - member_id: bigint unsigned not null"
        echo "   - restaurant_id: bigint unsigned not null"
        echo "   - order_id: int unsigned null"
        echo "   - type: enum(...) not null"
        echo "   - points: int not null"
        echo "   - balance_after: int not null"
        echo "   - description: text not null"
        echo "   - expires_at: timestamp null"
        echo "   - expired_at: timestamp null"
        echo "   - metadata: json null"
        echo "   - created_at: timestamp null"
        echo "   - updated_at: timestamp null"

        echo ""
        echo "üí° Apr√®s comparaison, utilisez l'option 1 ou 2"
        ;;

    *)
        echo "‚ùå Option invalide"
        exit 1
        ;;
esac

echo ""
echo "üß™ Test final - V√©rification des migrations:"
php artisan migrate:status | grep loyalty

echo ""
echo "‚úÖ CORRECTION TERMIN√âE"
echo "====================="

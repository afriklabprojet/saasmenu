#!/bin/bash

# Script de validation s√©curit√© pour RestroSaaS
# V√©rifie la configuration de s√©curit√© avant d√©ploiement production

echo "üîê VALIDATION S√âCURIT√â RESTOSAAS"
echo "================================"

# Couleurs pour output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de validation
check_config() {
    local config_name="$1"
    local config_value="$2"
    local expected="$3"

    if [ "$config_value" = "$expected" ]; then
        echo -e "${GREEN}[‚úì]${NC} $config_name: $config_value"
        return 0
    else
        echo -e "${RED}[‚úó]${NC} $config_name: $config_value (attendu: $expected)"
        return 1
    fi
}

echo -e "${BLUE}[STEP]${NC} 1. V√©rification Configuration Production"

# Lecture des variables .env
source .env 2>/dev/null || {
    echo -e "${RED}[ERROR]${NC} Fichier .env non trouv√©"
    exit 1
}

ERRORS=0

# V√©rification APP_ENV
check_config "APP_ENV" "$APP_ENV" "production" || ((ERRORS++))

# V√©rification APP_DEBUG
check_config "APP_DEBUG" "$APP_DEBUG" "false" || ((ERRORS++))

# V√©rification HTTPS
if [[ "$APP_URL" == https://* ]]; then
    echo -e "${GREEN}[‚úì]${NC} APP_URL: HTTPS configur√©"
else
    echo -e "${RED}[‚úó]${NC} APP_URL: HTTP d√©tect√© (HTTPS requis en production)"
    ((ERRORS++))
fi

# V√©rification FORCE_HTTPS
check_config "FORCE_HTTPS" "$FORCE_HTTPS" "true" || ((ERRORS++))

# V√©rification SESSION_SECURE_COOKIE
check_config "SESSION_SECURE_COOKIE" "$SESSION_SECURE_COOKIE" "true" || ((ERRORS++))

echo -e "${BLUE}[STEP]${NC} 2. V√©rification Middleware S√©curit√©"

# V√©rification SecurityHeaders middleware
if grep -q "SecurityHeaders" app/Http/Kernel.php; then
    echo -e "${GREEN}[‚úì]${NC} Middleware SecurityHeaders configur√©"
else
    echo -e "${RED}[‚úó]${NC} Middleware SecurityHeaders manquant"
    ((ERRORS++))
fi

echo -e "${BLUE}[STEP]${NC} 3. V√©rification Permissions Fichiers"

# V√©rification permissions storage
if [ -w "storage/" ]; then
    echo -e "${GREEN}[‚úì]${NC} R√©pertoire storage/ accessible en √©criture"
else
    echo -e "${RED}[‚úó]${NC} R√©pertoire storage/ non accessible en √©criture"
    ((ERRORS++))
fi

# V√©rification permissions bootstrap/cache
if [ -w "bootstrap/cache/" ]; then
    echo -e "${GREEN}[‚úì]${NC} R√©pertoire bootstrap/cache/ accessible en √©criture"
else
    echo -e "${RED}[‚úó]${NC} R√©pertoire bootstrap/cache/ non accessible en √©criture"
    ((ERRORS++))
fi

echo -e "${BLUE}[STEP]${NC} 4. V√©rification Configuration Base de Donn√©es"

# Test connexion base de donn√©es (si MySQL disponible)
if command -v mysql >/dev/null 2>&1; then
    if mysql -h"$DB_HOST" -u"$DB_USERNAME" -p"$DB_PASSWORD" -e "USE $DB_DATABASE; SELECT 1;" >/dev/null 2>&1; then
        echo -e "${GREEN}[‚úì]${NC} Connexion base de donn√©es fonctionnelle"
    else
        echo -e "${YELLOW}[!]${NC} Connexion base de donn√©es: V√©rifiez les param√®tres"
    fi
else
    echo -e "${YELLOW}[!]${NC} MySQL client non disponible pour test connexion"
fi

echo -e "${BLUE}[STEP]${NC} 5. V√©rification Cl√©s Secr√®tes"

# V√©rification APP_KEY
if [ ${#APP_KEY} -gt 20 ]; then
    echo -e "${GREEN}[‚úì]${NC} APP_KEY configur√©e"
else
    echo -e "${RED}[‚úó]${NC} APP_KEY manquante ou invalide"
    ((ERRORS++))
fi

echo ""
echo "üîç R√âSUM√â VALIDATION S√âCURIT√â"
echo "=============================="

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ Validation r√©ussie! Configuration s√©curis√©e pour production${NC}"
    echo -e "${GREEN}‚úÖ Nombre de v√©rifications r√©ussies: $(grep -c '\[‚úì\]' <<< "$(cat)")"
    echo -e "${GREEN}‚ùå Nombre d'erreurs: 0${NC}"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è  Validation √©chou√©e! $ERRORS erreur(s) de s√©curit√© d√©tect√©e(s)${NC}"
    echo -e "${RED}‚ùå Corrigez les erreurs avant d√©ploiement production${NC}"
    exit 1
fi

#!/bin/bash

# Script d'installation et configuration du syst√®me de monitoring RestroSaaS
# Automatise la mise en place compl√®te du monitoring temps r√©el

echo "üîç INSTALLATION MONITORING RESTOSAAS"
echo "===================================="

# Couleurs pour output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}[STEP 1]${NC} Cr√©ation des r√©pertoires de logs"

# Cr√©er r√©pertoires logs sp√©cialis√©s
mkdir -p storage/logs/monitoring
mkdir -p storage/logs/reports

echo -e "${GREEN}[‚úì]${NC} R√©pertoires cr√©√©s"

echo -e "${BLUE}[STEP 2]${NC} Configuration des permissions"

# Permissions logs
chmod -R 755 storage/logs/
chown -R www-data:www-data storage/logs/ 2>/dev/null || echo "Note: Ajustez les permissions pour votre serveur web"

echo -e "${GREEN}[‚úì]${NC} Permissions configur√©es"

echo -e "${BLUE}[STEP 3]${NC} Test du syst√®me de monitoring"

# Test commande monitoring
if php artisan system:monitor --alerts > /dev/null 2>&1; then
    echo -e "${GREEN}[‚úì]${NC} Commande system:monitor fonctionnelle"
else
    echo -e "${RED}[‚úó]${NC} Erreur avec system:monitor"
    exit 1
fi

echo -e "${BLUE}[STEP 4]${NC} Configuration du cron monitoring"

# Cr√©er script cron pour monitoring automatique
cat > monitoring-cron.sh << 'EOF'
#!/bin/bash
cd /chemin/vers/restro-saas
php artisan system:monitor --save > /dev/null 2>&1
EOF

chmod +x monitoring-cron.sh

echo -e "${GREEN}[‚úì]${NC} Script cron cr√©√©: monitoring-cron.sh"

echo -e "${BLUE}[STEP 5]${NC} Test de sant√© syst√®me"

# V√©rifier sant√© g√©n√©rale
echo "Test connexion base de donn√©es..."
if php artisan tinker --execute="DB::select('SELECT 1'); echo 'DB OK';" 2>/dev/null | grep -q "DB OK"; then
    echo -e "${GREEN}[‚úì]${NC} Base de donn√©es accessible"
else
    echo -e "${YELLOW}[!]${NC} V√©rifiez la configuration base de donn√©es"
fi

echo "Test cache syst√®me..."
if php artisan tinker --execute="Cache::put('test', 'ok', 60); echo Cache::get('test');" 2>/dev/null | grep -q "ok"; then
    echo -e "${GREEN}[‚úì]${NC} Cache fonctionnel"
else
    echo -e "${YELLOW}[!]${NC} V√©rifiez la configuration cache"
fi

echo -e "${BLUE}[STEP 6]${NC} Configuration routes monitoring"

# V√©rifier si routes monitoring existent
if grep -q "monitoring" routes/web.php 2>/dev/null; then
    echo -e "${GREEN}[‚úì]${NC} Routes monitoring d√©j√† configur√©es"
else
    echo "Ajout des routes monitoring..."
    cat >> routes/web.php << 'EOF'

// Routes monitoring syst√®me
require __DIR__.'/monitoring.php';
EOF
    echo -e "${GREEN}[‚úì]${NC} Routes monitoring ajout√©es"
fi

echo -e "${BLUE}[STEP 7]${NC} G√©n√©ration de la documentation"

# Cr√©er documentation monitoring
cat > MONITORING_SETUP.md << 'EOF'
# üìä SYST√àME DE MONITORING RESTOSAAS

## ‚úÖ Installation Compl√®te

### üîß Composants Install√©s
- ‚úÖ **SystemMonitoringService** - Service de collecte m√©triques
- ‚úÖ **PerformanceMonitoring** - Middleware surveillance performance
- ‚úÖ **MonitoringController** - Interface web monitoring
- ‚úÖ **system:monitor** - Commande CLI surveillance
- ‚úÖ **Logging avanc√©** - Canaux logs sp√©cialis√©s

### üìã Commandes Disponibles

#### Surveillance Syst√®me
```bash
# Rapport complet
php artisan system:monitor

# Alertes uniquement
php artisan system:monitor --alerts

# Format JSON
php artisan system:monitor --json

# Sauvegarder rapport
php artisan system:monitor --save
```

#### Monitoring Automatique
```bash
# Activer monitoring 5min via cron
* * * * * cd /path/to/project && php artisan schedule:run >> /dev/null 2>&1
```

### üåê Interface Web
- **Dashboard**: `/admin/monitoring`
- **API M√©triques**: `/admin/monitoring/api/metrics`
- **Logs Temps R√©el**: `/admin/monitoring/api/logs`
- **Alertes**: `/admin/monitoring/api/alerts`
- **Health Check**: `/health-check`

### üìä M√©triques Surveill√©es
- **Syst√®me**: M√©moire, CPU, disque
- **Base de donn√©es**: Temps connexion, statistiques
- **Performance**: Temps ex√©cution, usage m√©moire
- **Stockage**: Taille logs, cache, sessions
- **Application**: Status services, erreurs

### üö® Alertes Automatiques
- M√©moire > 500MB
- Espace disque < 2GB
- Temps r√©ponse DB > 1s
- Erreurs critiques syst√®me

### üìù Logs Sp√©cialis√©s
- `storage/logs/security.log` - √âv√©nements s√©curit√©
- `storage/logs/performance.log` - M√©triques performance
- `storage/logs/payments.log` - Transactions paiement
- `storage/logs/api.log` - Appels API

## üöÄ D√©marrage Rapide
1. Ex√©cuter: `./setup-monitoring.sh`
2. Tester: `php artisan system:monitor`
3. Configurer cron monitoring
4. Acc√©der dashboard: `/admin/monitoring`

EOF

echo -e "${GREEN}[‚úì]${NC} Documentation g√©n√©r√©e: MONITORING_SETUP.md"

echo ""
echo "üéâ INSTALLATION MONITORING TERMIN√âE"
echo "===================================="
echo -e "${GREEN}‚úÖ Syst√®me de monitoring RestroSaaS op√©rationnel${NC}"
echo ""
echo "üìã Prochaines √©tapes:"
echo "1. Configurer le cron pour monitoring automatique"
echo "2. Tester le dashboard: /admin/monitoring"
echo "3. Personnaliser les seuils d'alertes selon vos besoins"
echo ""
echo "üîß Commandes utiles:"
echo "‚Ä¢ php artisan system:monitor                    # Rapport complet"
echo "‚Ä¢ php artisan system:monitor --alerts           # Alertes uniquement"
echo "‚Ä¢ curl http://localhost/health-check            # Test API sant√©"
echo ""
